<?xml version="1.0" encoding="UTF-8"?>
<?rfc tocindent="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2616 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY rfc5246 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY rfc5056 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml">
<!ENTITY rfc5929 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml">
<!ENTITY rfc2617 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY rfc5849 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY I-D.ietf-oauth-v2 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-v2.xml">
<!ENTITY rfc4559 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4559.xml">
]>
<rfc docName="draft-williams-websec-session-continue-proto-00" ipr="trust200902" category="std">
  <front>
    <title abbrev="HTTP Session Problem">Hypertext Transport Protocol (HTTP) Session Continuation Protocol</title>
    <author initials="N." surname="Williams" fullname="Nicolas Williams">
      <organization abbrev="Cryptonector">Cryptonector, LLC</organization>
      <address>
        <email>nico@cryptonector.com</email>
      </address>
    </author>
    <date month="December" year="2012"/>
    <area>
Security Area
</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>
One of the most often talked about problems in web security is “cookies”. Web cookies are a method of associating requests with “sessions” that may have been authenticated somehow. Cookies are a form of bearer token that leave much to be desired. This document proposes a session “continuation” protocol for HyperText Transport Protocol (HTTP).</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" anchor="sec_Introduction">
      <t>
The motivation for this protocol is described in <xref target="I-D.williams-websec-session-continue-prob"/>.</t>
      <t>
We define a protocol for cryptographic “session continuation” for HyperText Transport Protocol (HTTP) <xref target="RFC2616"/>. Session continuation is the act of binding an HTTP request to a “session”. A “session” consists of all the HTTP requests by a given user (possibly an authenticated user, or possibly an anonymous user). This protocol is a cryptographic protocol that aims to meet all the requirements given in <xref target="I-D.williams-websec-session-continue-prob"/>.</t>
      <t>
The protocol consists of:</t>
      <t>
        <list style="symbols">
          <t>
a request header carrying a keyed Message Authentication Code (MAC) that prove possession of a shared session key (shared between the user and the server);</t>
          <t>
a response header advertising a default session scope to clients;</t>
          <t>
a session identification in the form of a URI;</t>
          <t>
optional server-side statelessness by storing state on the client-side, encrypted in a secret key known to the server;</t>
          <t>
a request header for requesting the establishment of a session;</t>
          <t>
a response header for indicating the establishment of a session, and including a session URI and any optional state to be repeated by the client.</t>
        </list>
      </t>
    </section>
    <section title="Session Keying" anchor="d1e242">
      <t>
There are two methods for keying an HTTP session:</t>
      <t>
        <list style="symbols">
          <t>
session keys are output by HTTP authentication;</t>
          <t>
or session keys are asserted by the client;</t>
        </list>
      </t>
      <t>
For the key assertion method TLS with confidentiality protection is clearly REQUIRED for security. We've considered the possibility of using Diffie-Hellman key agreement or RSA key transport, but as that would duplicate functionality that is in TLS we consider that out of scope for the time being. (We could also use the TLS extractor to generate keys, but that would be an unnecessary complication and would provide very little additional value.)</t>
      <section title="Mixing HTTP and HTTPS" anchor="d1e261">
        <t>
We expect that many sites will continute to mix HTTP and HTTPS for various reasons. To make this possible sessions will have two session keys: one for use over HTTPS, and the other for use over HTTP.</t>
      </section>
      <section title="Authenticated Session Keying" anchor="d1e270">
        <t>
When an HTTP client uses HTTP authentication, and the authentication mechanism used can establish a session key, then the client SHOULD request session initiation using a shared session key output by the HTTP authentication mechanism. The client MUST send the session initiation header concurrently with the last HTTP authentication message.</t>
      </section>
      <section title="Unauthenticated Session Keying" anchor="d1e279">
        <t>
Sessions for unauthenticated users may appear to make little sense at first. This is useful, for example, and just as web cookies are, for tracking “shopping carts” when a user is window shopping, so to speak.</t>
        <t>
For unauthenticated session initiation the client merely requests the creation of a session with an asserted session key, for lack of a better choice.</t>
      </section>
    </section>
    <section title="Session Initiation" anchor="d1e292">
      <t>
Sessions are initiated either as an outcome of HTTP authentication (see RFC2617, or in spite of the absence of any HTTP authentication; sessions are always initiated by the client.</t>
      <t>
Servers that support sessions will respond by creating a session and returning a session ID URI.</t>
      <t>
For unauthenticated session initiation the client includes a “Session-Init” header in its request. This header's value will consist of a base64-encoding of a randomly-generated octet string of at least 64 bits and up to 256 bits, and a boolean indicating whether the session will also operate without TLS. The server's response, if it agrees to session initiation, will contain a “Session-Init” header with a session identifier.</t>
      <t>
If the server accepts then the client and server will generate a session key as described in [...].</t>
      <t>
If the request is sent over HTTPS (TLS) then the client may allow the use of the session without TLS, in which case a second session key will be generated for use without TLS as described in [...].</t>
      <t>
[XXX Add a channel binding type negotiation, or perhaps say: tls-server-end-point if a server cert is used, else tls-unique.]</t>
      <t>
[XXX Add MAC and KDF algorithm negotiation.]</t>
    </section>
    <section title="Unauthenticated to Authenticated Session Upgrade" anchor="d1e319"/>
    <section title="Session Continuation" anchor="d1e325">
      <t>
Once a session is established the client binds requests to sessions as described here.</t>
      <t>
There are two cases: HTTPS and HTTP.</t>
      <t>
For the HTTPS case the client adds a “Session” header to its requests with the following content: the session identifier assigned by the server, a nonce generated by the client, and a MAC of the nonce and the TLS channel bindings.</t>
    </section>
    <section title="IANA Considerations" anchor="sec_IANA_Considerations">
      <t>
This document creates a number of new HTTP request and response headers. These headers will need to be added to the HTTP header registry: &lt;TBD&gt;.</t>
    </section>
    <section title="Security Considerations" anchor="sec_Security_Considerations">
      <t>
[...]</t>
    </section>
  </middle>
  <back>
    <references title="Normative References" anchor="d1e363">&rfc2616;
&rfc5246;
&rfc5056;
&rfc5929;

<reference anchor="I-D.williams-websec-session-continue-prob"><front><title>Hypertext Transport Protocol (HTTP) Session Continuation: Problem Statement</title><author initials="N." surname="Williams" fullname="Nicolas Williams"><organization/></author><date month="January" day="1" year="2013"/><abstract><t>Abstract One of the most often talked about problems in web security is “cookies”. Web cookies are a method of associating requests with “sessions” that may have been authenticated somehow. Cookies are a form of bearer token that leave much to be desired. This document describes the session “continuation” problem for the HyperText Transport Protocol (HTTP).</t></abstract></front><seriesInfo name="Internet-Draft" value="draft-williams-websec-session-continue-prob-00"/><format type="TXT" target="http://www.ietf.org/internet-drafts/draft-draft-williams-websec-session-continue-prob-00.txt"/></reference> </references>
    <references title="Informative References" anchor="sec_Normative_References">&rfc2617;
&rfc5849;
&I-D.ietf-oauth-v2;
&rfc4559;
</references>
  </back>
</rfc>
