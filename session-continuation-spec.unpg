


Network Working Group                                        N. Williams
Internet-Draft                                              Cryptonector
Intended status: Standards Track                       December 30, 2012
Expires: July 3, 2013


   Hypertext Transport Protocol (HTTP) Session Continuation Protocol
            draft-williams-websec-session-continue-proto-00

Abstract

   One of the most often talked about problems in web security is
   "cookies".  Web cookies are a method of associating requests with
   "sessions" that may have been authenticated somehow.  Cookies are a
   form of bearer token that leave much to be desired.  This document
   proposes a session "continuation" protocol for HyperText Transport
   Protocol (HTTP).

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 3, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.    Introduction
   2.    Session Keying
   2.1.  Mixing HTTP and HTTPS
   2.2.  Authenticated Session Keying
   2.3.  Unauthenticated Session Keying
   3.    Session Initiation
   4.    Unauthenticated to Authenticated Session Upgrade
   5.    Session Continuation
   6.    IANA Considerations
   7.    Security Considerations
   8.    References
   8.1.  Normative References
   8.2.  Informative References
         Author's Address


1.  Introduction

   The motivation for this protocol is described in
   [I-D.williams-websec-session-continue-prob].

   We define a protocol for cryptographic "session continuation" for
   HyperText Transport Protocol (HTTP) [RFC2616].  Session continuation
   is the act of binding an HTTP request to a "session".  A "session"
   consists of all the HTTP requests by a given user (possibly an
   authenticated user, or possibly an anonymous user).  This protocol is
   a cryptographic protocol that aims to meet all the requirements given
   in [I-D.williams-websec-session-continue-prob].

   The protocol consists of:

   o  a request header carrying a keyed Message Authentication Code
      (MAC) that prove possession of a shared session key (shared
      between the user and the server);

   o  a response header advertising a default session scope to clients;

   o  a session identification in the form of a URI;

   o  optional server-side statelessness by storing state on the client-
      side, encrypted in a secret key known to the server;

   o  a request header for requesting the establishment of a session;

   o  a response header for indicating the establishment of a session,
      and including a session URI and any optional state to be repeated
      by the client.


2.  Session Keying

   There are two methods for keying an HTTP session:

   o  session keys are output by HTTP authentication;

   o  or session keys are asserted by the client;

   For the key assertion method TLS with confidentiality protection is
   clearly REQUIRED for security.  We've considered the possibility of
   using Diffie-Hellman key agreement or RSA key transport, but as that
   would duplicate functionality that is in TLS we consider that out of
   scope for the time being.  (We could also use the TLS extractor to
   generate keys, but that would be an unnecessary complication and
   would provide very little additional value.)

2.1.  Mixing HTTP and HTTPS

   We expect that many sites will continute to mix HTTP and HTTPS for
   various reasons.  To make this possible sessions will have two
   session keys: one for use over HTTPS, and the other for use over
   HTTP.

2.2.  Authenticated Session Keying

   When an HTTP client uses HTTP authentication, and the authentication
   mechanism used can establish a session key, then the client SHOULD
   request session initiation using a shared session key output by the
   HTTP authentication mechanism.  The client MUST send the session
   initiation header concurrently with the last HTTP authentication
   message.

2.3.  Unauthenticated Session Keying

   Sessions for unauthenticated users may appear to make little sense at
   first.  This is useful, for example, and just as web cookies are, for
   tracking "shopping carts" when a user is window shopping, so to
   speak.

   For unauthenticated session initiation the client merely requests the
   creation of a session with an asserted session key, for lack of a
   better choice.


3.  Session Initiation

   Sessions are initiated either as an outcome of HTTP authentication
   (see RFC2617, or in spite of the absence of any HTTP authentication;
   sessions are always initiated by the client.

   Servers that support sessions will respond by creating a session and
   returning a session ID URI.

   For unauthenticated session initiation the client includes a
   "Session-Init" header in its request.  This header's value will
   consist of a base64-encoding of a randomly-generated octet string of
   at least 64 bits and up to 256 bits, and a boolean indicating whether
   the session will also operate without TLS.  The server's response, if
   it agrees to session initiation, will contain a "Session-Init" header
   with a session identifier.

   If the server accepts then the client and server will generate a
   session key as described in [...].

   If the request is sent over HTTPS (TLS) then the client may allow the
   use of the session without TLS, in which case a second session key
   will be generated for use without TLS as described in [...].

   [XXX Add a channel binding type negotiation, or perhaps say: tls-
   server-end-point if a server cert is used, else tls-unique.]

   [XXX Add MAC and KDF algorithm negotiation.]


4.  Unauthenticated to Authenticated Session Upgrade


5.  Session Continuation

   Once a session is established the client binds requests to sessions
   as described here.

   There are two cases: HTTPS and HTTP.

   For the HTTPS case the client adds a "Session" header to its requests
   with the following content: the session identifier assigned by the
   server, a nonce generated by the client, and a MAC of the nonce and
   the TLS channel bindings.


6.  IANA Considerations

   This document creates a number of new HTTP request and response
   headers.  These headers will need to be added to the HTTP header
   registry: <TBD>.


7.  Security Considerations

   [...]


8.  References

8.1.  Normative References

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC5056]  Williams, N., "On the Use of Channel Bindings to Secure
              Channels", RFC 5056, November 2007.

   [RFC5929]  Altman, J., Williams, N., and L. Zhu, "Channel Bindings
              for TLS", RFC 5929, July 2010.

   [I-D.williams-websec-session-continue-prob]
              Williams, N., "Hypertext Transport Protocol (HTTP) Session
              Continuation: Problem Statement",
              draft-williams-websec-session-continue-prob-00 (work in
              progress), January 2013.

8.2.  Informative References

   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              RFC 2617, June 1999.

   [RFC5849]  Hammer-Lahav, E., "The OAuth 1.0 Protocol", RFC 5849,
              April 2010.

   [I-D.ietf-oauth-v2]
              Hardt, D., "The OAuth 2.0 Authorization Framework",
              draft-ietf-oauth-v2-31 (work in progress), August 2012.

   [RFC4559]  Jaganathan, K., Zhu, L., and J. Brezak, "SPNEGO-based
              Kerberos and NTLM HTTP Authentication in Microsoft
              Windows", RFC 4559, June 2006.


Author's Address

   Nicolas Williams
   Cryptonector, LLC

   Email: nico@cryptonector.com

